# The MIT License
#
# Copyright (c) 2020, Jenkins Project Contributors.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

create_fingerprint_schema = CREATE SCHEMA FINGERPRINT;

create_fingerprint_table = CREATE TABLE FINGERPRINT.FINGERPRINT \
  (FINGERPRINT_ID      VARCHAR(256)   NOT NULL, \
   INSTANCE_ID         CHAR(32)       NOT NULL, \
   TIMESTAMP           TIMESTAMP      NOT NULL, \
   FILENAME            VARCHAR(256)   NOT NULL, \
   ORIGINAL_JOB_NAME   VARCHAR(256)           , \
   ORIGINAL_JOB_BUILD  INT                    , \
   PRIMARY KEY(FINGERPRINT_ID, INSTANCE_ID));

create_fingerprint_job_build_relation_table = CREATE TABLE FINGERPRINT.FINGERPRINT_JOB_BUILD_RELATION \
  (FINGERPRINT_ID VARCHAR(256)    NOT NULL, \
   INSTANCE_ID    CHAR(32)        NOT NULL, \
   JOB            VARCHAR(256)    NOT NULL, \
   BUILD          INT             NOT NULL, \
   PRIMARY KEY(FINGERPRINT_ID, INSTANCE_ID, JOB, BUILD), \
   FOREIGN KEY(FINGERPRINT_ID, INSTANCE_ID) REFERENCES FINGERPRINT.FINGERPRINT(FINGERPRINT_ID, INSTANCE_ID) ON DELETE CASCADE);

create_fingerprint_job_build_relation_index = CREATE INDEX FINGERPRINT_JOB_BUILD_RELATION_INDEX \
  ON FINGERPRINT.FINGERPRINT_JOB_BUILD_RELATION (FINGERPRINT_ID, INSTANCE_ID);

create_fingerprint_facet_relation_table = CREATE TABLE FINGERPRINT.FINGERPRINT_FACET_RELATION \
  (FINGERPRINT_ID     VARCHAR(256)    NOT NULL, \
   INSTANCE_ID        CHAR(32)        NOT NULL, \
   FACET_NAME         VARCHAR(256)    NOT NULL, \
   FACET_ENTRY        JSONB           NOT NULL, \
   DELETION_BLOCKED   BOOLEAN         NOT NULL, \
   PRIMARY KEY(FINGERPRINT_ID, INSTANCE_ID, FACET_NAME, FACET_ENTRY), \
   FOREIGN KEY(FINGERPRINT_ID, INSTANCE_ID) REFERENCES FINGERPRINT.FINGERPRINT(FINGERPRINT_ID, INSTANCE_ID) ON DELETE CASCADE);

create_fingerprint_facet_relation_index = CREATE INDEX FINGERPRINT_FACET_RELATION_INDEX \
  ON FINGERPRINT.FINGERPRINT_FACET_RELATION (FINGERPRINT_ID, INSTANCE_ID);

insert_fingerprint = INSERT INTO FINGERPRINT.FINGERPRINT \
  (FINGERPRINT_ID, INSTANCE_ID, TIMESTAMP, FILENAME, ORIGINAL_JOB_NAME, ORIGINAL_JOB_BUILD) \
  VALUES (?, ? , ?, ?, ?, ?);

insert_fingerprint_job_build_relation = INSERT INTO FINGERPRINT.FINGERPRINT_JOB_BUILD_RELATION \
  (FINGERPRINT_ID, INSTANCE_ID, JOB, BUILD) \
  VALUES (?, ?, ?, ?);

insert_fingerprint_facet_relation = INSERT INTO FINGERPRINT.FINGERPRINT_FACET_RELATION \
  (FINGERPRINT_ID, INSTANCE_ID, FACET_NAME, FACET_ENTRY, DELETION_BLOCKED) \
  VALUES (?, ?, ?, to_json(?::json), ?);

select_fingerprint = \
  SELECT TIMESTAMP, FILENAME, ORIGINAL_JOB_NAME, ORIGINAL_JOB_BUILD, USAGES, FACETS \
  from ( \
      SELECT * \
      FROM FINGERPRINT.FINGERPRINT \
      WHERE FINGERPRINT_ID = ? AND INSTANCE_ID = ? \
      GROUP BY FINGERPRINT_ID, INSTANCE_ID \
    ) fingerprint_table \
  left join ( \
      SELECT FINGERPRINT_ID, INSTANCE_ID, JSON_AGG(json_build_object('job', JOB, 'build', BUILD)) AS USAGES \
      FROM FINGERPRINT.FINGERPRINT_JOB_BUILD_RELATION \
      GROUP BY FINGERPRINT_ID, INSTANCE_ID \
    ) \
    fingerprint_job_build_relation_table on \
      (fingerprint_table.fingerprint_id = fingerprint_job_build_relation_table.fingerprint_id and \
        fingerprint_table.instance_id = fingerprint_job_build_relation_table.instance_id) \
  left join ( \
      SELECT FINGERPRINT_ID, INSTANCE_ID, JSON_AGG(json_build_object('facet_name', FACET_NAME, 'facet_entry', FACET_ENTRY)) AS FACETS \
      FROM FINGERPRINT.FINGERPRINT_FACET_RELATION \
      GROUP BY FINGERPRINT_ID, INSTANCE_ID \
    ) \
    fingerprint_facet_relation_table on \
      (fingerprint_table.fingerprint_id = fingerprint_facet_relation_table.fingerprint_id and \
        fingerprint_table.instance_id = fingerprint_facet_relation_table.instance_id);

select_all_usages_in_instance = SELECT ORIGINAL_USAGES, USAGES \
  from ( \
      SELECT JSON_AGG(json_build_object('job', ORIGINAL_JOB_NAME, 'build', ORIGINAL_JOB_BUILD)) \
      AS ORIGINAL_USAGES \
      FROM ( \
          SELECT DISTINCT ORIGINAL_JOB_NAME, ORIGINAL_JOB_BUILD \
          FROM FINGERPRINT.FINGERPRINT \
          WHERE INSTANCE_ID = ? \
        ) AS anothertable \
      GROUP BY ORIGINAL_JOB_NAME \
    ) fingerprint_table \
  left join ( \
    SELECT JSON_AGG(json_build_object('job', JOB, 'usage', USAGE)) AS USAGES \
    FROM ( \
        SELECT JOB, string_agg(distinct BUILD::character varying, ',') AS USAGE \
        FROM FINGERPRINT.FINGERPRINT_JOB_BUILD_RELATION \
        WHERE INSTANCE_ID = ? \
        GROUP BY JOB \
      ) AS derivedTable \
    ) exnkdtable on true;

select_fingerprint_exists_for_instance = SELECT COUNT(*) AS TOTAL FROM FINGERPRINT.FINGERPRINT WHERE INSTANCE_ID = ?;

delete_fingerprint = DELETE FROM FINGERPRINT.FINGERPRINT \
  WHERE FINGERPRINT_ID = ? AND INSTANCE_ID = ?;

check_schema_exists = SELECT COUNT(*) AS TOTAL FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'fingerprint';

check_fingerprint_table_exists = SELECT COUNT(*) AS TOTAL FROM INFORMATION_SCHEMA.TABLES \
  WHERE TABLE_SCHEMA = 'fingerprint' \
  AND TABLE_NAME = 'fingerprint';

check_fingerprint_job_build_relation_table_exists = SELECT COUNT(*) AS TOTAL FROM INFORMATION_SCHEMA.TABLES \
  WHERE TABLE_SCHEMA = 'fingerprint' \
  AND TABLE_NAME = 'fingerprint_job_build_relation';

check_fingerprint_facet_relation_table_exists = SELECT COUNT(*) AS TOTAL FROM INFORMATION_SCHEMA.TABLES \
  WHERE TABLE_SCHEMA = 'fingerprint' \
  AND TABLE_NAME = 'fingerprint_facet_relation';

select_fingerprint_count = SELECT COUNT(*) AS TOTAL FROM FINGERPRINT.FINGERPRINT \
  WHERE FINGERPRINT_ID = ? AND INSTANCE_ID = ?;

select_fingerprint_job_build_relation_count = SELECT COUNT(*) AS TOTAL FROM FINGERPRINT.FINGERPRINT_JOB_BUILD_RELATION \
  WHERE FINGERPRINT_ID = ? AND INSTANCE_ID = ?;

select_fingerprint_facet_relation_count = SELECT COUNT(*) AS TOTAL FROM FINGERPRINT.FINGERPRINT_FACET_RELATION \
  WHERE FINGERPRINT_ID = ? AND INSTANCE_ID = ?;
